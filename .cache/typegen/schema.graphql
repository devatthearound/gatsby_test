# Define parent-child relations between types. This is used to add `child*` and `children*` convenience fields like `childImageSharp`.
directive @childOf(
  # A list of mime-types this type is a child of. Usually these are the mime-types handled by a transformer plugin.
  mimeTypes: [String!]! = []

  # A list of types this type is a child of. Usually these are the types handled by a transformer plugin.
  types: [String!]! = []
) on OBJECT

# Add date formatting options.
directive @dateformat(difference: String, formatString: String, fromNow: Boolean, locale: String) on FIELD_DEFINITION

# Do not infer field types from field values.
directive @dontInfer on OBJECT

# Link to File node by relative path.
directive @fileByRelativePath(from: String) on FIELD_DEFINITION

# Infer field types from field values.
directive @infer on OBJECT

# Link to node by foreign-key relation.
directive @link(by: String! = "id", from: String, on: String) on FIELD_DEFINITION

# Define the mime-types handled by this type.
directive @mimeTypes(
  # The mime-types handled by this type.
  types: [String!]! = []
) on OBJECT

# DEPRECATED: Use interface inheritance instead, i.e. "interface Foo implements Node".
#
# Adds root query fields for an interface. All implementing types must also implement the Node interface.
directive @nodeInterface on INTERFACE

# Proxy resolver from another field.
directive @proxy(from: String!, fromNode: Boolean! = false) on FIELD_DEFINITION

input AVIFOptions {
  lossless: Boolean
  quality: Int
  speed: Int
}

input BlurredOptions {
  # Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this
  toFormat: ImageFormat

  # Width of the generated low-res preview. Default is 20px
  width: Int
}

input BooleanQueryOperatorInput {
  eq: Boolean
  in: [Boolean]
  ne: Boolean
  nin: [Boolean]
}

type ContentfulAsset implements ContentfulReference & Node & RemoteFile {
  children: [Node!]!
  contentful_id: String!
  createdAt(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  description: String
  file: ContentfulAssetFile
  filename: String!
  filesize: Int

  # Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info.
  gatsbyImage(
    #
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    #
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    #
    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    #
    breakpoints: [Int] = [750, 1080, 1366, 1920]
    cropFocus: [RemoteFileCropFocus]
    fit: RemoteFileFit = COVER

    #
    # The image formats to generate. Valid values are AUTO (meaning the same format as the source image), JPG, PNG, WEBP and AVIF.
    # The default value is [AUTO, WEBP, AVIF], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    # not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    # both PNG and JPG is not supported and will be ignored.
    #
    formats: [RemoteFileFormat!] = [AUTO, WEBP, AVIF]

    #
    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    #
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    #
    layout: RemoteFileLayout = CONSTRAINED

    #
    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    #
    outputPixelDensities: [Float] = [0.25, 0.5, 1, 2]

    #
    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # TRACED_SVG: a low-resolution traced SVG of the image.
    # NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    placeholder: RemoteFilePlaceholder = DOMINANT_COLOR
    quality: Int = 75

    #
    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    #
    sizes: String

    #
    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    #
    width: Int
  ): GatsbyImageData
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # Desired corner radius in pixels. Results in an image with rounded corners.
    # Pass `-1` for a full circle/ellipse.
    cornerRadius: Int = 0
    cropFocus: ContentfulImageCropFocus

    # The image formats to generate. Valid values are AUTO (meaning the same format as the source image), JPG, PNG, WEBP and AVIF.
    # The default value is [AUTO, WEBP], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    # not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    # both PNG and JPG is not supported and will be ignored.
    formats: [GatsbyImageFormat] = [NO_CHANGE, WEBP]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int
    jpegProgressive: Boolean = true

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # TRACED_SVG: a low-resolution traced SVG of the image.
    # NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    placeholder: GatsbyImagePlaceholder
    quality: Int
    resizingBehavior: ImageResizingBehavior

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int
  ): JSON
  height: Int
  id: ID!
  internal: Internal!
  mimeType: String!
  node_locale: String
  parent: Node
  placeholderUrl: String
  publicUrl: String!
  resize(
    aspectRatio: Float
    cropFocus: [RemoteFileCropFocus]
    fit: RemoteFileFit = COVER

    #
    # The image formats to generate. Valid values are AUTO (meaning the same format as the source image), JPG, PNG, WEBP and AVIF.
    # The default value is [AUTO, WEBP, AVIF], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    # not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    # both PNG and JPG is not supported and will be ignored.
    format: RemoteFileFormat = AUTO
    height: Int
    quality: Int = 75
    width: Int
  ): RemoteFileResize
  size: Int
  spaceId: String
  sys: ContentfulAssetSys
  title: String
  updatedAt(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  url: String
  width: Int
}

type ContentfulAssetConnection {
  distinct(field: ContentfulAssetFieldsEnum!): [String!]!
  edges: [ContentfulAssetEdge!]!
  group(field: ContentfulAssetFieldsEnum!, limit: Int, skip: Int): [ContentfulAssetGroupConnection!]!
  max(field: ContentfulAssetFieldsEnum!): Float
  min(field: ContentfulAssetFieldsEnum!): Float
  nodes: [ContentfulAsset!]!
  pageInfo: PageInfo!
  sum(field: ContentfulAssetFieldsEnum!): Float
  totalCount: Int!
}

type ContentfulAssetEdge {
  next: ContentfulAsset
  node: ContentfulAsset!
  previous: ContentfulAsset
}

enum ContentfulAssetFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  contentful_id
  createdAt
  description
  file___contentType
  file___details___image___height
  file___details___image___width
  file___details___size
  file___fileName
  file___url
  filename
  filesize
  gatsbyImage @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  height
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  mimeType
  node_locale
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  placeholderUrl
  publicUrl
  resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  size
  spaceId
  sys___revision
  sys___type
  title
  updatedAt
  url
  width
}

type ContentfulAssetFile {
  contentType: String
  details: ContentfulAssetFileDetails
  fileName: String
  url: String
}

type ContentfulAssetFileDetails {
  image: ContentfulAssetFileDetailsImage
  size: Int
}

input ContentfulAssetFileDetailsFilterInput {
  image: ContentfulAssetFileDetailsImageFilterInput
  size: IntQueryOperatorInput
}

type ContentfulAssetFileDetailsImage {
  height: Int
  width: Int
}

input ContentfulAssetFileDetailsImageFilterInput {
  height: IntQueryOperatorInput
  width: IntQueryOperatorInput
}

input ContentfulAssetFileFilterInput {
  contentType: StringQueryOperatorInput
  details: ContentfulAssetFileDetailsFilterInput
  fileName: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

input ContentfulAssetFilterInput {
  children: NodeFilterListInput
  contentful_id: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  description: StringQueryOperatorInput
  file: ContentfulAssetFileFilterInput
  filename: StringQueryOperatorInput
  filesize: IntQueryOperatorInput
  gatsbyImage: GatsbyImageDataQueryOperatorInput
  gatsbyImageData: JSONQueryOperatorInput
  height: IntQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  mimeType: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  parent: NodeFilterInput
  placeholderUrl: StringQueryOperatorInput
  publicUrl: StringQueryOperatorInput
  resize: RemoteFileResizeFilterInput
  size: IntQueryOperatorInput
  spaceId: StringQueryOperatorInput
  sys: ContentfulAssetSysFilterInput
  title: StringQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  url: StringQueryOperatorInput
  width: IntQueryOperatorInput
}

input ContentfulAssetFilterListInput {
  elemMatch: ContentfulAssetFilterInput
}

type ContentfulAssetGroupConnection {
  distinct(field: ContentfulAssetFieldsEnum!): [String!]!
  edges: [ContentfulAssetEdge!]!
  field: String!
  fieldValue: String
  group(field: ContentfulAssetFieldsEnum!, limit: Int, skip: Int): [ContentfulAssetGroupConnection!]!
  max(field: ContentfulAssetFieldsEnum!): Float
  min(field: ContentfulAssetFieldsEnum!): Float
  nodes: [ContentfulAsset!]!
  pageInfo: PageInfo!
  sum(field: ContentfulAssetFieldsEnum!): Float
  totalCount: Int!
}

input ContentfulAssetSortInput {
  fields: [ContentfulAssetFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type ContentfulAssetSys {
  revision: Int
  type: String
}

input ContentfulAssetSysFilterInput {
  revision: IntQueryOperatorInput
  type: StringQueryOperatorInput
}

type ContentfulContentType implements Node {
  children: [Node!]!
  description: String
  displayField: String
  id: ID!
  internal: Internal!
  name: String
  parent: Node
  sys: ContentfulContentTypeSys
}

type ContentfulContentTypeConnection {
  distinct(field: ContentfulContentTypeFieldsEnum!): [String!]!
  edges: [ContentfulContentTypeEdge!]!
  group(field: ContentfulContentTypeFieldsEnum!, limit: Int, skip: Int): [ContentfulContentTypeGroupConnection!]!
  max(field: ContentfulContentTypeFieldsEnum!): Float
  min(field: ContentfulContentTypeFieldsEnum!): Float
  nodes: [ContentfulContentType!]!
  pageInfo: PageInfo!
  sum(field: ContentfulContentTypeFieldsEnum!): Float
  totalCount: Int!
}

type ContentfulContentTypeEdge {
  next: ContentfulContentType
  node: ContentfulContentType!
  previous: ContentfulContentType
}

enum ContentfulContentTypeFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  description
  displayField
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  name
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  sys___type
}

input ContentfulContentTypeFilterInput {
  children: NodeFilterListInput
  description: StringQueryOperatorInput
  displayField: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  name: StringQueryOperatorInput
  parent: NodeFilterInput
  sys: ContentfulContentTypeSysFilterInput
}

type ContentfulContentTypeGroupConnection {
  distinct(field: ContentfulContentTypeFieldsEnum!): [String!]!
  edges: [ContentfulContentTypeEdge!]!
  field: String!
  fieldValue: String
  group(field: ContentfulContentTypeFieldsEnum!, limit: Int, skip: Int): [ContentfulContentTypeGroupConnection!]!
  max(field: ContentfulContentTypeFieldsEnum!): Float
  min(field: ContentfulContentTypeFieldsEnum!): Float
  nodes: [ContentfulContentType!]!
  pageInfo: PageInfo!
  sum(field: ContentfulContentTypeFieldsEnum!): Float
  totalCount: Int!
}

input ContentfulContentTypeSortInput {
  fields: [ContentfulContentTypeFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type ContentfulContentTypeSys {
  type: String
}

input ContentfulContentTypeSysFilterInput {
  type: StringQueryOperatorInput
}

interface ContentfulEntry implements Node {
  children: [Node!]!
  contentful_id: String!
  id: ID!
  internal: Internal!
  node_locale: String!
  parent: Node
}

type ContentfulEntryConnection {
  distinct(field: ContentfulEntryFieldsEnum!): [String!]!
  edges: [ContentfulEntryEdge!]!
  group(field: ContentfulEntryFieldsEnum!, limit: Int, skip: Int): [ContentfulEntryGroupConnection!]!
  max(field: ContentfulEntryFieldsEnum!): Float
  min(field: ContentfulEntryFieldsEnum!): Float
  nodes: [ContentfulEntry!]!
  pageInfo: PageInfo!
  sum(field: ContentfulEntryFieldsEnum!): Float
  totalCount: Int!
}

type ContentfulEntryEdge {
  next: ContentfulEntry
  node: ContentfulEntry!
  previous: ContentfulEntry
}

enum ContentfulEntryFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  contentful_id
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  node_locale
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
}

input ContentfulEntryFilterInput {
  children: NodeFilterListInput
  contentful_id: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  node_locale: StringQueryOperatorInput
  parent: NodeFilterInput
}

type ContentfulEntryGroupConnection {
  distinct(field: ContentfulEntryFieldsEnum!): [String!]!
  edges: [ContentfulEntryEdge!]!
  field: String!
  fieldValue: String
  group(field: ContentfulEntryFieldsEnum!, limit: Int, skip: Int): [ContentfulEntryGroupConnection!]!
  max(field: ContentfulEntryFieldsEnum!): Float
  min(field: ContentfulEntryFieldsEnum!): Float
  nodes: [ContentfulEntry!]!
  pageInfo: PageInfo!
  sum(field: ContentfulEntryFieldsEnum!): Float
  totalCount: Int!
}

input ContentfulEntrySortInput {
  fields: [ContentfulEntryFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum ContentfulImageCropFocus {
  BOTTOM
  BOTTOM_LEFT
  BOTTOM_RIGHT
  CENTER
  FACE
  FACES
  LEFT
  RIGHT
  TOP
  TOP_LEFT
  TOP_RIGHT
}

type ContentfulLandingPage implements ContentfulEntry & ContentfulReference & Node {
  children: [Node!]!
  contentful_id: String!
  createdAt(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  id: ID!
  internal: Internal!
  logo: ContentfulAsset
  node_locale: String!
  parent: Node
  spaceId: String
  sys: ContentfulLandingPageSys
  title1: String
  updatedAt(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
}

type ContentfulLandingPageConnection {
  distinct(field: ContentfulLandingPageFieldsEnum!): [String!]!
  edges: [ContentfulLandingPageEdge!]!
  group(field: ContentfulLandingPageFieldsEnum!, limit: Int, skip: Int): [ContentfulLandingPageGroupConnection!]!
  max(field: ContentfulLandingPageFieldsEnum!): Float
  min(field: ContentfulLandingPageFieldsEnum!): Float
  nodes: [ContentfulLandingPage!]!
  pageInfo: PageInfo!
  sum(field: ContentfulLandingPageFieldsEnum!): Float
  totalCount: Int!
}

type ContentfulLandingPageEdge {
  next: ContentfulLandingPage
  node: ContentfulLandingPage!
  previous: ContentfulLandingPage
}

enum ContentfulLandingPageFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  contentful_id
  createdAt
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  logo___children
  logo___children___children
  logo___children___children___children
  logo___children___children___id
  logo___children___id
  logo___children___internal___content
  logo___children___internal___contentDigest
  logo___children___internal___description
  logo___children___internal___fieldOwners
  logo___children___internal___ignoreType
  logo___children___internal___mediaType
  logo___children___internal___owner
  logo___children___internal___type
  logo___children___parent___children
  logo___children___parent___id
  logo___contentful_id
  logo___createdAt
  logo___description
  logo___file___contentType
  logo___file___details___size
  logo___file___fileName
  logo___file___url
  logo___filename
  logo___filesize
  logo___gatsbyImage @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  logo___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  logo___height
  logo___id
  logo___internal___content
  logo___internal___contentDigest
  logo___internal___description
  logo___internal___fieldOwners
  logo___internal___ignoreType
  logo___internal___mediaType
  logo___internal___owner
  logo___internal___type
  logo___mimeType
  logo___node_locale
  logo___parent___children
  logo___parent___children___children
  logo___parent___children___id
  logo___parent___id
  logo___parent___internal___content
  logo___parent___internal___contentDigest
  logo___parent___internal___description
  logo___parent___internal___fieldOwners
  logo___parent___internal___ignoreType
  logo___parent___internal___mediaType
  logo___parent___internal___owner
  logo___parent___internal___type
  logo___parent___parent___children
  logo___parent___parent___id
  logo___placeholderUrl
  logo___publicUrl
  logo___resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  logo___resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  logo___resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  logo___size
  logo___spaceId
  logo___sys___revision
  logo___sys___type
  logo___title
  logo___updatedAt
  logo___url
  logo___width
  node_locale
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  spaceId
  sys___contentType___sys___id
  sys___contentType___sys___linkType
  sys___contentType___sys___type
  sys___revision
  sys___type
  title1
  updatedAt
}

input ContentfulLandingPageFilterInput {
  children: NodeFilterListInput
  contentful_id: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  logo: ContentfulAssetFilterInput
  node_locale: StringQueryOperatorInput
  parent: NodeFilterInput
  spaceId: StringQueryOperatorInput
  sys: ContentfulLandingPageSysFilterInput
  title1: StringQueryOperatorInput
  updatedAt: DateQueryOperatorInput
}

type ContentfulLandingPageGroupConnection {
  distinct(field: ContentfulLandingPageFieldsEnum!): [String!]!
  edges: [ContentfulLandingPageEdge!]!
  field: String!
  fieldValue: String
  group(field: ContentfulLandingPageFieldsEnum!, limit: Int, skip: Int): [ContentfulLandingPageGroupConnection!]!
  max(field: ContentfulLandingPageFieldsEnum!): Float
  min(field: ContentfulLandingPageFieldsEnum!): Float
  nodes: [ContentfulLandingPage!]!
  pageInfo: PageInfo!
  sum(field: ContentfulLandingPageFieldsEnum!): Float
  totalCount: Int!
}

input ContentfulLandingPageSortInput {
  fields: [ContentfulLandingPageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type ContentfulLandingPageSys {
  contentType: ContentfulLandingPageSysContentType
  revision: Int
  type: String
}

type ContentfulLandingPageSysContentType {
  sys: ContentfulLandingPageSysContentTypeSys
}

input ContentfulLandingPageSysContentTypeFilterInput {
  sys: ContentfulLandingPageSysContentTypeSysFilterInput
}

type ContentfulLandingPageSysContentTypeSys {
  id: String
  linkType: String
  type: String
}

input ContentfulLandingPageSysContentTypeSysFilterInput {
  id: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulLandingPageSysFilterInput {
  contentType: ContentfulLandingPageSysContentTypeFilterInput
  revision: IntQueryOperatorInput
  type: StringQueryOperatorInput
}

type ContentfulNutritionalSupplements implements ContentfulEntry & ContentfulReference & Node {
  children: [Node!]!
  contentful_id: String!
  createdAt(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  id: ID!
  images: [ContentfulAsset]
  internal: Internal!
  name: String
  node_locale: String!
  parent: Node
  price: Int
  spaceId: String
  sys: ContentfulNutritionalSupplementsSys
  updatedAt(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
}

type ContentfulNutritionalSupplementsConnection {
  distinct(field: ContentfulNutritionalSupplementsFieldsEnum!): [String!]!
  edges: [ContentfulNutritionalSupplementsEdge!]!
  group(field: ContentfulNutritionalSupplementsFieldsEnum!, limit: Int, skip: Int): [ContentfulNutritionalSupplementsGroupConnection!]!
  max(field: ContentfulNutritionalSupplementsFieldsEnum!): Float
  min(field: ContentfulNutritionalSupplementsFieldsEnum!): Float
  nodes: [ContentfulNutritionalSupplements!]!
  pageInfo: PageInfo!
  sum(field: ContentfulNutritionalSupplementsFieldsEnum!): Float
  totalCount: Int!
}

type ContentfulNutritionalSupplementsEdge {
  next: ContentfulNutritionalSupplements
  node: ContentfulNutritionalSupplements!
  previous: ContentfulNutritionalSupplements
}

enum ContentfulNutritionalSupplementsFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  contentful_id
  createdAt
  id
  images
  images___children
  images___children___children
  images___children___children___children
  images___children___children___id
  images___children___id
  images___children___internal___content
  images___children___internal___contentDigest
  images___children___internal___description
  images___children___internal___fieldOwners
  images___children___internal___ignoreType
  images___children___internal___mediaType
  images___children___internal___owner
  images___children___internal___type
  images___children___parent___children
  images___children___parent___id
  images___contentful_id
  images___createdAt
  images___description
  images___file___contentType
  images___file___details___size
  images___file___fileName
  images___file___url
  images___filename
  images___filesize
  images___gatsbyImage @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  images___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  images___height
  images___id
  images___internal___content
  images___internal___contentDigest
  images___internal___description
  images___internal___fieldOwners
  images___internal___ignoreType
  images___internal___mediaType
  images___internal___owner
  images___internal___type
  images___mimeType
  images___node_locale
  images___parent___children
  images___parent___children___children
  images___parent___children___id
  images___parent___id
  images___parent___internal___content
  images___parent___internal___contentDigest
  images___parent___internal___description
  images___parent___internal___fieldOwners
  images___parent___internal___ignoreType
  images___parent___internal___mediaType
  images___parent___internal___owner
  images___parent___internal___type
  images___parent___parent___children
  images___parent___parent___id
  images___placeholderUrl
  images___publicUrl
  images___resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  images___resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  images___resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  images___size
  images___spaceId
  images___sys___revision
  images___sys___type
  images___title
  images___updatedAt
  images___url
  images___width
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  name
  node_locale
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  price
  spaceId
  sys___contentType___sys___id
  sys___contentType___sys___linkType
  sys___contentType___sys___type
  sys___revision
  sys___type
  updatedAt
}

input ContentfulNutritionalSupplementsFilterInput {
  children: NodeFilterListInput
  contentful_id: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  id: StringQueryOperatorInput
  images: ContentfulAssetFilterListInput
  internal: InternalFilterInput
  name: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  parent: NodeFilterInput
  price: IntQueryOperatorInput
  spaceId: StringQueryOperatorInput
  sys: ContentfulNutritionalSupplementsSysFilterInput
  updatedAt: DateQueryOperatorInput
}

type ContentfulNutritionalSupplementsGroupConnection {
  distinct(field: ContentfulNutritionalSupplementsFieldsEnum!): [String!]!
  edges: [ContentfulNutritionalSupplementsEdge!]!
  field: String!
  fieldValue: String
  group(field: ContentfulNutritionalSupplementsFieldsEnum!, limit: Int, skip: Int): [ContentfulNutritionalSupplementsGroupConnection!]!
  max(field: ContentfulNutritionalSupplementsFieldsEnum!): Float
  min(field: ContentfulNutritionalSupplementsFieldsEnum!): Float
  nodes: [ContentfulNutritionalSupplements!]!
  pageInfo: PageInfo!
  sum(field: ContentfulNutritionalSupplementsFieldsEnum!): Float
  totalCount: Int!
}

input ContentfulNutritionalSupplementsSortInput {
  fields: [ContentfulNutritionalSupplementsFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type ContentfulNutritionalSupplementsSys {
  contentType: ContentfulNutritionalSupplementsSysContentType
  revision: Int
  type: String
}

type ContentfulNutritionalSupplementsSysContentType {
  sys: ContentfulNutritionalSupplementsSysContentTypeSys
}

input ContentfulNutritionalSupplementsSysContentTypeFilterInput {
  sys: ContentfulNutritionalSupplementsSysContentTypeSysFilterInput
}

type ContentfulNutritionalSupplementsSysContentTypeSys {
  id: String
  linkType: String
  type: String
}

input ContentfulNutritionalSupplementsSysContentTypeSysFilterInput {
  id: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input ContentfulNutritionalSupplementsSysFilterInput {
  contentType: ContentfulNutritionalSupplementsSysContentTypeFilterInput
  revision: IntQueryOperatorInput
  type: StringQueryOperatorInput
}

interface ContentfulReference {
  contentful_id: String!
  id: ID!
}

# A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar Date

input DateQueryOperatorInput {
  eq: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

type Directory implements Node {
  absolutePath: String!
  accessTime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  atime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  atimeMs: Float!
  base: String!
  birthTime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  changeTime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  children: [Node!]!
  ctime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  ctimeMs: Float!
  dev: Int!
  dir: String!
  ext: String!
  extension: String!
  gid: Int!
  id: ID!
  ino: Float!
  internal: Internal!
  mode: Int!
  modifiedTime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  mtime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  mtimeMs: Float!
  name: String!
  nlink: Int!
  parent: Node
  prettySize: String!
  rdev: Int!
  relativeDirectory: String!
  relativePath: String!
  root: String!
  size: Int!
  sourceInstanceName: String!
  uid: Int!
}

type DirectoryConnection {
  distinct(field: DirectoryFieldsEnum!): [String!]!
  edges: [DirectoryEdge!]!
  group(field: DirectoryFieldsEnum!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
  max(field: DirectoryFieldsEnum!): Float
  min(field: DirectoryFieldsEnum!): Float
  nodes: [Directory!]!
  pageInfo: PageInfo!
  sum(field: DirectoryFieldsEnum!): Float
  totalCount: Int!
}

type DirectoryEdge {
  next: Directory
  node: Directory!
  previous: Directory
}

enum DirectoryFieldsEnum {
  absolutePath
  accessTime
  atime
  atimeMs
  base
  birthTime
  birthtime
  birthtimeMs
  changeTime
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  ctime
  ctimeMs
  dev
  dir
  ext
  extension
  gid
  id
  ino
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  mode
  modifiedTime
  mtime
  mtimeMs
  name
  nlink
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prettySize
  rdev
  relativeDirectory
  relativePath
  root
  size
  sourceInstanceName
  uid
}

input DirectoryFilterInput {
  absolutePath: StringQueryOperatorInput
  accessTime: DateQueryOperatorInput
  atime: DateQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  base: StringQueryOperatorInput
  birthTime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  changeTime: DateQueryOperatorInput
  children: NodeFilterListInput
  ctime: DateQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  dev: IntQueryOperatorInput
  dir: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  gid: IntQueryOperatorInput
  id: StringQueryOperatorInput
  ino: FloatQueryOperatorInput
  internal: InternalFilterInput
  mode: IntQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  name: StringQueryOperatorInput
  nlink: IntQueryOperatorInput
  parent: NodeFilterInput
  prettySize: StringQueryOperatorInput
  rdev: IntQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  root: StringQueryOperatorInput
  size: IntQueryOperatorInput
  sourceInstanceName: StringQueryOperatorInput
  uid: IntQueryOperatorInput
}

type DirectoryGroupConnection {
  distinct(field: DirectoryFieldsEnum!): [String!]!
  edges: [DirectoryEdge!]!
  field: String!
  fieldValue: String
  group(field: DirectoryFieldsEnum!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
  max(field: DirectoryFieldsEnum!): Float
  min(field: DirectoryFieldsEnum!): Float
  nodes: [Directory!]!
  pageInfo: PageInfo!
  sum(field: DirectoryFieldsEnum!): Float
  totalCount: Int!
}

input DirectorySortInput {
  fields: [DirectoryFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input DuotoneGradient {
  highlight: String!
  opacity: Int
  shadow: String!
}

type File implements Node {
  absolutePath: String!
  accessTime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  atime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  atimeMs: Float!
  base: String!
  birthTime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  changeTime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!

  # Returns the first child node of type ImageSharp or null if there are no children of given type on this node
  childImageSharp: ImageSharp
  children: [Node!]!

  # Returns all children nodes filtered by type ImageSharp
  childrenImageSharp: [ImageSharp]
  ctime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  ctimeMs: Float!
  dev: Int!
  dir: String!
  ext: String!
  extension: String!
  gid: Int!
  id: ID!
  ino: Float!
  internal: Internal!
  mode: Int!
  modifiedTime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  mtime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  mtimeMs: Float!
  name: String!
  nlink: Int!
  parent: Node
  prettySize: String!

  # Copy file to static directory and return public url to it
  publicURL: String
  rdev: Int!
  relativeDirectory: String!
  relativePath: String!
  root: String!
  size: Int!
  sourceInstanceName: String!
  uid: Int!
}

type FileConnection {
  distinct(field: FileFieldsEnum!): [String!]!
  edges: [FileEdge!]!
  group(field: FileFieldsEnum!, limit: Int, skip: Int): [FileGroupConnection!]!
  max(field: FileFieldsEnum!): Float
  min(field: FileFieldsEnum!): Float
  nodes: [File!]!
  pageInfo: PageInfo!
  sum(field: FileFieldsEnum!): Float
  totalCount: Int!
}

type FileEdge {
  next: File
  node: File!
  previous: File
}

enum FileFieldsEnum {
  absolutePath
  accessTime
  atime
  atimeMs
  base
  birthTime
  birthtime
  birthtimeMs
  blksize
  blocks
  changeTime
  childImageSharp___children
  childImageSharp___children___children
  childImageSharp___children___children___children
  childImageSharp___children___children___id
  childImageSharp___children___id
  childImageSharp___children___internal___content
  childImageSharp___children___internal___contentDigest
  childImageSharp___children___internal___description
  childImageSharp___children___internal___fieldOwners
  childImageSharp___children___internal___ignoreType
  childImageSharp___children___internal___mediaType
  childImageSharp___children___internal___owner
  childImageSharp___children___internal___type
  childImageSharp___children___parent___children
  childImageSharp___children___parent___id
  childImageSharp___fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___id
  childImageSharp___internal___content
  childImageSharp___internal___contentDigest
  childImageSharp___internal___description
  childImageSharp___internal___fieldOwners
  childImageSharp___internal___ignoreType
  childImageSharp___internal___mediaType
  childImageSharp___internal___owner
  childImageSharp___internal___type
  childImageSharp___original___height
  childImageSharp___original___src
  childImageSharp___original___width
  childImageSharp___parent___children
  childImageSharp___parent___children___children
  childImageSharp___parent___children___id
  childImageSharp___parent___id
  childImageSharp___parent___internal___content
  childImageSharp___parent___internal___contentDigest
  childImageSharp___parent___internal___description
  childImageSharp___parent___internal___fieldOwners
  childImageSharp___parent___internal___ignoreType
  childImageSharp___parent___internal___mediaType
  childImageSharp___parent___internal___owner
  childImageSharp___parent___internal___type
  childImageSharp___parent___parent___children
  childImageSharp___parent___parent___id
  childImageSharp___resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children
  childrenImageSharp
  childrenImageSharp___children
  childrenImageSharp___children___children
  childrenImageSharp___children___children___children
  childrenImageSharp___children___children___id
  childrenImageSharp___children___id
  childrenImageSharp___children___internal___content
  childrenImageSharp___children___internal___contentDigest
  childrenImageSharp___children___internal___description
  childrenImageSharp___children___internal___fieldOwners
  childrenImageSharp___children___internal___ignoreType
  childrenImageSharp___children___internal___mediaType
  childrenImageSharp___children___internal___owner
  childrenImageSharp___children___internal___type
  childrenImageSharp___children___parent___children
  childrenImageSharp___children___parent___id
  childrenImageSharp___fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___id
  childrenImageSharp___internal___content
  childrenImageSharp___internal___contentDigest
  childrenImageSharp___internal___description
  childrenImageSharp___internal___fieldOwners
  childrenImageSharp___internal___ignoreType
  childrenImageSharp___internal___mediaType
  childrenImageSharp___internal___owner
  childrenImageSharp___internal___type
  childrenImageSharp___original___height
  childrenImageSharp___original___src
  childrenImageSharp___original___width
  childrenImageSharp___parent___children
  childrenImageSharp___parent___children___children
  childrenImageSharp___parent___children___id
  childrenImageSharp___parent___id
  childrenImageSharp___parent___internal___content
  childrenImageSharp___parent___internal___contentDigest
  childrenImageSharp___parent___internal___description
  childrenImageSharp___parent___internal___fieldOwners
  childrenImageSharp___parent___internal___ignoreType
  childrenImageSharp___parent___internal___mediaType
  childrenImageSharp___parent___internal___owner
  childrenImageSharp___parent___internal___type
  childrenImageSharp___parent___parent___children
  childrenImageSharp___parent___parent___id
  childrenImageSharp___resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  ctime
  ctimeMs
  dev
  dir
  ext
  extension
  gid
  id
  ino
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  mode
  modifiedTime
  mtime
  mtimeMs
  name
  nlink
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prettySize
  publicURL
  rdev
  relativeDirectory
  relativePath
  root
  size
  sourceInstanceName
  uid
}

input FileFilterInput {
  absolutePath: StringQueryOperatorInput
  accessTime: DateQueryOperatorInput
  atime: DateQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  base: StringQueryOperatorInput
  birthTime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  blksize: IntQueryOperatorInput
  blocks: IntQueryOperatorInput
  changeTime: DateQueryOperatorInput
  childImageSharp: ImageSharpFilterInput
  children: NodeFilterListInput
  childrenImageSharp: ImageSharpFilterListInput
  ctime: DateQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  dev: IntQueryOperatorInput
  dir: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  gid: IntQueryOperatorInput
  id: StringQueryOperatorInput
  ino: FloatQueryOperatorInput
  internal: InternalFilterInput
  mode: IntQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  name: StringQueryOperatorInput
  nlink: IntQueryOperatorInput
  parent: NodeFilterInput
  prettySize: StringQueryOperatorInput
  publicURL: StringQueryOperatorInput
  rdev: IntQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  root: StringQueryOperatorInput
  size: IntQueryOperatorInput
  sourceInstanceName: StringQueryOperatorInput
  uid: IntQueryOperatorInput
}

type FileGroupConnection {
  distinct(field: FileFieldsEnum!): [String!]!
  edges: [FileEdge!]!
  field: String!
  fieldValue: String
  group(field: FileFieldsEnum!, limit: Int, skip: Int): [FileGroupConnection!]!
  max(field: FileFieldsEnum!): Float
  min(field: FileFieldsEnum!): Float
  nodes: [File!]!
  pageInfo: PageInfo!
  sum(field: FileFieldsEnum!): Float
  totalCount: Int!
}

input FileSortInput {
  fields: [FileFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input FloatQueryOperatorInput {
  eq: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  nin: [Float]
}

scalar GatsbyImageData

input GatsbyImageDataQueryOperatorInput {
  eq: GatsbyImageData
  in: [GatsbyImageData]
  ne: GatsbyImageData
  nin: [GatsbyImageData]
}

enum GatsbyImageFormat {
  AUTO
  AVIF
  JPG
  NO_CHANGE
  PNG
  WEBP
}

enum GatsbyImageLayout {
  CONSTRAINED
  FIXED
  FULL_WIDTH
}

enum GatsbyImagePlaceholder {
  BLURRED
  DOMINANT_COLOR
  NONE
  TRACED_SVG
}

enum HeadingsMdx {
  h1
  h2
  h3
  h4
  h5
  h6
}

enum ImageCropFocus {
  ATTENTION
  CENTER
  EAST
  ENTROPY
  NORTH
  NORTHEAST
  NORTHWEST
  SOUTH
  SOUTHEAST
  SOUTHWEST
  WEST
}

enum ImageFit {
  CONTAIN
  COVER
  FILL
  INSIDE
  OUTSIDE
}

enum ImageFormat {
  AUTO
  AVIF
  JPG
  NO_CHANGE
  PNG
  WEBP
}

enum ImageLayout {
  CONSTRAINED
  FIXED
  FULL_WIDTH
}

enum ImagePlaceholder {
  BLURRED
  DOMINANT_COLOR
  NONE
  TRACED_SVG
}

enum ImageResizingBehavior {
  # Crop a part of the original image to match the specified size.
  CROP

  # Crop the image to the specified dimensions, if the original image is smaller than these dimensions, then the image will be upscaled.
  FILL
  NO_CHANGE

  # Same as the default resizing, but adds padding so that the generated image has the specified dimensions.
  PAD

  # Scale the image regardless of the original aspect ratio.
  SCALE

  # When used in association with the f parameter below, creates a thumbnail from the image based on a focus area.
  THUMB
}

type ImageSharp implements Node {
  children: [Node!]!
  fixed(background: String = "rgba(0,0,0,1)", base64Width: Int, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = NO_CHANGE, toFormatBase64: ImageFormat = NO_CHANGE, traceSVG: Potrace, trim: Float = 0, webpQuality: Int, width: Int): ImageSharpFixed
  fluid(
    background: String = "rgba(0,0,0,1)"
    base64Width: Int
    cropFocus: ImageCropFocus = ATTENTION
    duotone: DuotoneGradient
    fit: ImageFit = COVER
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    jpegQuality: Int
    maxHeight: Int
    maxWidth: Int
    pngCompressionSpeed: Int = 4
    pngQuality: Int
    quality: Int
    rotate: Int = 0
    sizes: String = ""

    # A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    srcSetBreakpoints: [Int] = []
    toFormat: ImageFormat = NO_CHANGE
    toFormatBase64: ImageFormat = NO_CHANGE
    traceSVG: Potrace
    trim: Float = 0
    webpQuality: Int
  ): ImageSharpFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Options to pass to sharp when generating AVIF images.
    avifOptions: AVIFOptions

    # Background color applied to the wrapper. Also passed to sharp to use as a background when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    blurredOptions: BlurredOptions

    # Specifies the image widths to generate. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The image formats to generate. Valid values are "AUTO" (meaning the same format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    # The default value is [AUTO, WEBP], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    # not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    # both PNG and JPG is not supported and will be ignored.
    formats: [ImageFormat]

    # The display height of the generated image for layout = FIXED, and the maximum display height of the largest image for layout = CONSTRAINED.
    # The image will be cropped if the aspect ratio does not match the source image. If omitted, it is calculated from the supplied width,
    # matching the aspect ratio of the source image.
    height: Int

    # Options to pass to sharp when generating JPG images.
    jpgOptions: JPGOptions

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: ImageLayout = CONSTRAINED

    # A list of image pixel densities to generate. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1, 2] for CONSTRAINED. In this case, an image with a constrained layout
    # and width = 400 would generate images at 100, 200, 400 and 800px wide. Ignored for FULL_WIDTH images, which use breakpoints instead
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # TRACED_SVG: a low-resolution traced SVG of the image.
    # NONE: no placeholder. Set "background" to use a fixed background color.
    placeholder: ImagePlaceholder

    # Options to pass to sharp when generating PNG images.
    pngOptions: PNGOptions

    # The default quality. This is overridden by any format-specific options
    quality: Int

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download.
    # You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    # does not actually span the full width of the screen, in which case you should pass the correct size here.
    sizes: String

    # Options for traced placeholder SVGs. You also should set placeholder to "TRACED_SVG".
    tracedSVGOptions: Potrace

    # Options to pass to sharp to control cropping and other image manipulations.
    transformOptions: TransformOptions

    # Options to pass to sharp when generating WebP images.
    webpOptions: WebPOptions

    # The display width of the generated image for layout = FIXED, and the maximum display width of the largest image for layout = CONSTRAINED.
    # Ignored if layout = FLUID.
    width: Int
  ): GatsbyImageData!
  id: ID!
  internal: Internal!
  original: ImageSharpOriginal
  parent: Node
  resize(background: String = "rgba(0,0,0,1)", base64: Boolean = false, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = NO_CHANGE, traceSVG: Potrace, trim: Float = 0, webpQuality: Int, width: Int): ImageSharpResize
}

type ImageSharpConnection {
  distinct(field: ImageSharpFieldsEnum!): [String!]!
  edges: [ImageSharpEdge!]!
  group(field: ImageSharpFieldsEnum!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
  max(field: ImageSharpFieldsEnum!): Float
  min(field: ImageSharpFieldsEnum!): Float
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  sum(field: ImageSharpFieldsEnum!): Float
  totalCount: Int!
}

type ImageSharpEdge {
  next: ImageSharp
  node: ImageSharp!
  previous: ImageSharp
}

enum ImageSharpFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  original___height
  original___src
  original___width
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
}

input ImageSharpFilterInput {
  children: NodeFilterListInput
  fixed: ImageSharpFixedFilterInput
  fluid: ImageSharpFluidFilterInput
  gatsbyImageData: GatsbyImageDataQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  original: ImageSharpOriginalFilterInput
  parent: NodeFilterInput
  resize: ImageSharpResizeFilterInput
}

input ImageSharpFilterListInput {
  elemMatch: ImageSharpFilterInput
}

type ImageSharpFixed {
  aspectRatio: Float
  base64: String
  height: Float!
  originalName: String
  src: String!
  srcSet: String!
  srcSetWebp: String
  srcWebp: String
  tracedSVG: String
  width: Float!
}

input ImageSharpFixedFilterInput {
  aspectRatio: FloatQueryOperatorInput
  base64: StringQueryOperatorInput
  height: FloatQueryOperatorInput
  originalName: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: FloatQueryOperatorInput
}

type ImageSharpFluid {
  aspectRatio: Float!
  base64: String
  originalImg: String
  originalName: String
  presentationHeight: Int!
  presentationWidth: Int!
  sizes: String!
  src: String!
  srcSet: String!
  srcSetWebp: String
  srcWebp: String
  tracedSVG: String
}

input ImageSharpFluidFilterInput {
  aspectRatio: FloatQueryOperatorInput
  base64: StringQueryOperatorInput
  originalImg: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
  presentationHeight: IntQueryOperatorInput
  presentationWidth: IntQueryOperatorInput
  sizes: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
}

type ImageSharpGroupConnection {
  distinct(field: ImageSharpFieldsEnum!): [String!]!
  edges: [ImageSharpEdge!]!
  field: String!
  fieldValue: String
  group(field: ImageSharpFieldsEnum!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
  max(field: ImageSharpFieldsEnum!): Float
  min(field: ImageSharpFieldsEnum!): Float
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  sum(field: ImageSharpFieldsEnum!): Float
  totalCount: Int!
}

type ImageSharpOriginal {
  height: Float
  src: String
  width: Float
}

input ImageSharpOriginalFilterInput {
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  width: FloatQueryOperatorInput
}

type ImageSharpResize {
  aspectRatio: Float
  height: Int
  originalName: String
  src: String
  tracedSVG: String
  width: Int
}

input ImageSharpResizeFilterInput {
  aspectRatio: FloatQueryOperatorInput
  height: IntQueryOperatorInput
  originalName: StringQueryOperatorInput
  src: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: IntQueryOperatorInput
}

input ImageSharpSortInput {
  fields: [ImageSharpFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input IntQueryOperatorInput {
  eq: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  nin: [Int]
}

type Internal {
  content: String
  contentDigest: String!
  description: String
  fieldOwners: [String]
  ignoreType: Boolean
  mediaType: String
  owner: String!
  type: String!
}

input InternalFilterInput {
  content: StringQueryOperatorInput
  contentDigest: StringQueryOperatorInput
  description: StringQueryOperatorInput
  fieldOwners: StringQueryOperatorInput
  ignoreType: BooleanQueryOperatorInput
  mediaType: StringQueryOperatorInput
  owner: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input JPGOptions {
  progressive: Boolean = true
  quality: Int
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JSONQueryOperatorInput {
  eq: JSON
  glob: JSON
  in: [JSON]
  ne: JSON
  nin: [JSON]
  regex: JSON
}

enum MarkdownExcerptFormats {
  HTML
  MARKDOWN
  PLAIN
}

type MarkdownHeading {
  depth: Int
  id: String
  value: String
}

input MarkdownHeadingFilterInput {
  depth: IntQueryOperatorInput
  id: StringQueryOperatorInput
  value: StringQueryOperatorInput
}

input MarkdownHeadingFilterListInput {
  elemMatch: MarkdownHeadingFilterInput
}

enum MarkdownHeadingLevels {
  h1
  h2
  h3
  h4
  h5
  h6
}

type MarkdownRemark implements Node {
  children: [Node!]!
  excerpt(format: MarkdownExcerptFormats = PLAIN, pruneLength: Int = 140, truncate: Boolean = false): String
  excerptAst(pruneLength: Int = 140, truncate: Boolean = false): JSON
  headings(depth: MarkdownHeadingLevels): [MarkdownHeading]
  html: String
  htmlAst: JSON
  id: ID!
  internal: Internal!
  parent: Node
  tableOfContents(absolute: Boolean = false, heading: String, maxDepth: Int, pathToSlugField: String = ""): String
  timeToRead: Int
  wordCount: MarkdownWordCount
}

type MarkdownRemarkConnection {
  distinct(field: MarkdownRemarkFieldsEnum!): [String!]!
  edges: [MarkdownRemarkEdge!]!
  group(field: MarkdownRemarkFieldsEnum!, limit: Int, skip: Int): [MarkdownRemarkGroupConnection!]!
  max(field: MarkdownRemarkFieldsEnum!): Float
  min(field: MarkdownRemarkFieldsEnum!): Float
  nodes: [MarkdownRemark!]!
  pageInfo: PageInfo!
  sum(field: MarkdownRemarkFieldsEnum!): Float
  totalCount: Int!
}

type MarkdownRemarkEdge {
  next: MarkdownRemark
  node: MarkdownRemark!
  previous: MarkdownRemark
}

enum MarkdownRemarkFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  excerpt @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  excerptAst @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  headings @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  headings___depth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  headings___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  headings___value @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  html
  htmlAst
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  tableOfContents @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  timeToRead
  wordCount___paragraphs
  wordCount___sentences
  wordCount___words
}

input MarkdownRemarkFilterInput {
  children: NodeFilterListInput
  excerpt: StringQueryOperatorInput
  excerptAst: JSONQueryOperatorInput
  headings: MarkdownHeadingFilterListInput
  html: StringQueryOperatorInput
  htmlAst: JSONQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
  tableOfContents: StringQueryOperatorInput
  timeToRead: IntQueryOperatorInput
  wordCount: MarkdownWordCountFilterInput
}

type MarkdownRemarkGroupConnection {
  distinct(field: MarkdownRemarkFieldsEnum!): [String!]!
  edges: [MarkdownRemarkEdge!]!
  field: String!
  fieldValue: String
  group(field: MarkdownRemarkFieldsEnum!, limit: Int, skip: Int): [MarkdownRemarkGroupConnection!]!
  max(field: MarkdownRemarkFieldsEnum!): Float
  min(field: MarkdownRemarkFieldsEnum!): Float
  nodes: [MarkdownRemark!]!
  pageInfo: PageInfo!
  sum(field: MarkdownRemarkFieldsEnum!): Float
  totalCount: Int!
}

input MarkdownRemarkSortInput {
  fields: [MarkdownRemarkFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type MarkdownWordCount {
  paragraphs: Int
  sentences: Int
  words: Int
}

input MarkdownWordCountFilterInput {
  paragraphs: IntQueryOperatorInput
  sentences: IntQueryOperatorInput
  words: IntQueryOperatorInput
}

type Mdx implements Node {
  body: String!
  children: [Node!]!
  excerpt(pruneLength: Int = 140, truncate: Boolean = false): String!
  fileAbsolutePath: String!
  frontmatter: MdxFrontmatter
  headings(depth: HeadingsMdx): [MdxHeadingMdx]
  html: String
  id: ID!
  internal: Internal!
  mdxAST: JSON
  parent: Node
  rawBody: String!
  slug: String
  tableOfContents(maxDepth: Int): JSON
  timeToRead: Int
  wordCount: MdxWordCount
}

type MdxConnection {
  distinct(field: MdxFieldsEnum!): [String!]!
  edges: [MdxEdge!]!
  group(field: MdxFieldsEnum!, limit: Int, skip: Int): [MdxGroupConnection!]!
  max(field: MdxFieldsEnum!): Float
  min(field: MdxFieldsEnum!): Float
  nodes: [Mdx!]!
  pageInfo: PageInfo!
  sum(field: MdxFieldsEnum!): Float
  totalCount: Int!
}

type MdxEdge {
  next: Mdx
  node: Mdx!
  previous: Mdx
}

enum MdxFieldsEnum {
  body
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  excerpt @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fileAbsolutePath
  frontmatter___title
  headings @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  headings___depth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  headings___value @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  html
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  mdxAST
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  rawBody
  slug
  tableOfContents @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  timeToRead
  wordCount___paragraphs
  wordCount___sentences
  wordCount___words
}

input MdxFilterInput {
  body: StringQueryOperatorInput
  children: NodeFilterListInput
  excerpt: StringQueryOperatorInput
  fileAbsolutePath: StringQueryOperatorInput
  frontmatter: MdxFrontmatterFilterInput
  headings: MdxHeadingMdxFilterListInput
  html: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  mdxAST: JSONQueryOperatorInput
  parent: NodeFilterInput
  rawBody: StringQueryOperatorInput
  slug: StringQueryOperatorInput
  tableOfContents: JSONQueryOperatorInput
  timeToRead: IntQueryOperatorInput
  wordCount: MdxWordCountFilterInput
}

type MdxFrontmatter {
  title: String!
}

input MdxFrontmatterFilterInput {
  title: StringQueryOperatorInput
}

type MdxGroupConnection {
  distinct(field: MdxFieldsEnum!): [String!]!
  edges: [MdxEdge!]!
  field: String!
  fieldValue: String
  group(field: MdxFieldsEnum!, limit: Int, skip: Int): [MdxGroupConnection!]!
  max(field: MdxFieldsEnum!): Float
  min(field: MdxFieldsEnum!): Float
  nodes: [Mdx!]!
  pageInfo: PageInfo!
  sum(field: MdxFieldsEnum!): Float
  totalCount: Int!
}

type MdxHeadingMdx {
  depth: Int
  value: String
}

input MdxHeadingMdxFilterInput {
  depth: IntQueryOperatorInput
  value: StringQueryOperatorInput
}

input MdxHeadingMdxFilterListInput {
  elemMatch: MdxHeadingMdxFilterInput
}

input MdxSortInput {
  fields: [MdxFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type MdxWordCount {
  paragraphs: Int
  sentences: Int
  words: Int
}

input MdxWordCountFilterInput {
  paragraphs: IntQueryOperatorInput
  sentences: IntQueryOperatorInput
  words: IntQueryOperatorInput
}

# Node Interface
interface Node {
  children: [Node!]!
  id: ID!
  internal: Internal!
  parent: Node
}

input NodeFilterInput {
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
}

input NodeFilterListInput {
  elemMatch: NodeFilterInput
}

input PNGOptions {
  compressionSpeed: Int = 4
  quality: Int
}

type PageInfo {
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  itemCount: Int!
  pageCount: Int!
  perPage: Int
  totalCount: Int!
}

input Potrace {
  alphaMax: Float
  background: String
  blackOnWhite: Boolean
  color: String
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  turdSize: Float
  turnPolicy: PotraceTurnPolicy
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_LEFT
  TURNPOLICY_MAJORITY
  TURNPOLICY_MINORITY
  TURNPOLICY_RIGHT
  TURNPOLICY_WHITE
}

type Query {
  allContentfulAsset(filter: ContentfulAssetFilterInput, limit: Int, skip: Int, sort: ContentfulAssetSortInput): ContentfulAssetConnection!
  allContentfulContentType(filter: ContentfulContentTypeFilterInput, limit: Int, skip: Int, sort: ContentfulContentTypeSortInput): ContentfulContentTypeConnection!
  allContentfulEntry(filter: ContentfulEntryFilterInput, limit: Int, skip: Int, sort: ContentfulEntrySortInput): ContentfulEntryConnection!
  allContentfulLandingPage(filter: ContentfulLandingPageFilterInput, limit: Int, skip: Int, sort: ContentfulLandingPageSortInput): ContentfulLandingPageConnection!
  allContentfulNutritionalSupplements(filter: ContentfulNutritionalSupplementsFilterInput, limit: Int, skip: Int, sort: ContentfulNutritionalSupplementsSortInput): ContentfulNutritionalSupplementsConnection!
  allDirectory(filter: DirectoryFilterInput, limit: Int, skip: Int, sort: DirectorySortInput): DirectoryConnection!
  allFile(filter: FileFilterInput, limit: Int, skip: Int, sort: FileSortInput): FileConnection!
  allImageSharp(filter: ImageSharpFilterInput, limit: Int, skip: Int, sort: ImageSharpSortInput): ImageSharpConnection!
  allMarkdownRemark(filter: MarkdownRemarkFilterInput, limit: Int, skip: Int, sort: MarkdownRemarkSortInput): MarkdownRemarkConnection!
  allMdx(filter: MdxFilterInput, limit: Int, skip: Int, sort: MdxSortInput): MdxConnection!
  allSite(filter: SiteFilterInput, limit: Int, skip: Int, sort: SiteSortInput): SiteConnection!
  allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, limit: Int, skip: Int, sort: SiteBuildMetadataSortInput): SiteBuildMetadataConnection!
  allSiteFunction(filter: SiteFunctionFilterInput, limit: Int, skip: Int, sort: SiteFunctionSortInput): SiteFunctionConnection!
  allSitePage(filter: SitePageFilterInput, limit: Int, skip: Int, sort: SitePageSortInput): SitePageConnection!
  allSitePlugin(filter: SitePluginFilterInput, limit: Int, skip: Int, sort: SitePluginSortInput): SitePluginConnection!
  contentfulAsset(children: NodeFilterListInput, contentful_id: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, description: StringQueryOperatorInput, file: ContentfulAssetFileFilterInput, filename: StringQueryOperatorInput, filesize: IntQueryOperatorInput, gatsbyImage: GatsbyImageDataQueryOperatorInput, gatsbyImageData: JSONQueryOperatorInput, height: IntQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, mimeType: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, parent: NodeFilterInput, placeholderUrl: StringQueryOperatorInput, publicUrl: StringQueryOperatorInput, resize: RemoteFileResizeFilterInput, size: IntQueryOperatorInput, spaceId: StringQueryOperatorInput, sys: ContentfulAssetSysFilterInput, title: StringQueryOperatorInput, updatedAt: DateQueryOperatorInput, url: StringQueryOperatorInput, width: IntQueryOperatorInput): ContentfulAsset
  contentfulContentType(children: NodeFilterListInput, description: StringQueryOperatorInput, displayField: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, parent: NodeFilterInput, sys: ContentfulContentTypeSysFilterInput): ContentfulContentType
  contentfulEntry(children: NodeFilterListInput, contentful_id: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, node_locale: StringQueryOperatorInput, parent: NodeFilterInput): ContentfulEntry
  contentfulLandingPage(children: NodeFilterListInput, contentful_id: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, logo: ContentfulAssetFilterInput, node_locale: StringQueryOperatorInput, parent: NodeFilterInput, spaceId: StringQueryOperatorInput, sys: ContentfulLandingPageSysFilterInput, title1: StringQueryOperatorInput, updatedAt: DateQueryOperatorInput): ContentfulLandingPage
  contentfulNutritionalSupplements(children: NodeFilterListInput, contentful_id: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, id: StringQueryOperatorInput, images: ContentfulAssetFilterListInput, internal: InternalFilterInput, name: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, parent: NodeFilterInput, price: IntQueryOperatorInput, spaceId: StringQueryOperatorInput, sys: ContentfulNutritionalSupplementsSysFilterInput, updatedAt: DateQueryOperatorInput): ContentfulNutritionalSupplements
  directory(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, changeTime: DateQueryOperatorInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): Directory
  file(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, changeTime: DateQueryOperatorInput, childImageSharp: ImageSharpFilterInput, children: NodeFilterListInput, childrenImageSharp: ImageSharpFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, publicURL: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): File
  imageSharp(children: NodeFilterListInput, fixed: ImageSharpFixedFilterInput, fluid: ImageSharpFluidFilterInput, gatsbyImageData: GatsbyImageDataQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, original: ImageSharpOriginalFilterInput, parent: NodeFilterInput, resize: ImageSharpResizeFilterInput): ImageSharp
  markdownRemark(children: NodeFilterListInput, excerpt: StringQueryOperatorInput, excerptAst: JSONQueryOperatorInput, headings: MarkdownHeadingFilterListInput, html: StringQueryOperatorInput, htmlAst: JSONQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, tableOfContents: StringQueryOperatorInput, timeToRead: IntQueryOperatorInput, wordCount: MarkdownWordCountFilterInput): MarkdownRemark
  mdx(body: StringQueryOperatorInput, children: NodeFilterListInput, excerpt: StringQueryOperatorInput, fileAbsolutePath: StringQueryOperatorInput, frontmatter: MdxFrontmatterFilterInput, headings: MdxHeadingMdxFilterListInput, html: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, mdxAST: JSONQueryOperatorInput, parent: NodeFilterInput, rawBody: StringQueryOperatorInput, slug: StringQueryOperatorInput, tableOfContents: JSONQueryOperatorInput, timeToRead: IntQueryOperatorInput, wordCount: MdxWordCountFilterInput): Mdx
  site(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, graphqlTypegen: BooleanQueryOperatorInput, host: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, jsxRuntime: StringQueryOperatorInput, parent: NodeFilterInput, pathPrefix: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, port: IntQueryOperatorInput, siteMetadata: SiteSiteMetadataFilterInput, trailingSlash: StringQueryOperatorInput): Site
  siteBuildMetadata(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput): SiteBuildMetadata
  siteFunction(absoluteCompiledFilePath: StringQueryOperatorInput, children: NodeFilterListInput, functionRoute: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, matchPath: StringQueryOperatorInput, originalAbsoluteFilePath: StringQueryOperatorInput, originalRelativeFilePath: StringQueryOperatorInput, parent: NodeFilterInput, pluginName: StringQueryOperatorInput, relativeCompiledFilePath: StringQueryOperatorInput): SiteFunction
  sitePage(children: NodeFilterListInput, component: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, internalComponentName: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, pageContext: JSONQueryOperatorInput, parent: NodeFilterInput, path: StringQueryOperatorInput, pluginCreator: SitePluginFilterInput): SitePage
  sitePlugin(browserAPIs: StringQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, nodeAPIs: StringQueryOperatorInput, packageJson: JSONQueryOperatorInput, parent: NodeFilterInput, pluginFilepath: StringQueryOperatorInput, pluginOptions: JSONQueryOperatorInput, resolve: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, version: StringQueryOperatorInput): SitePlugin
}

# Remote Interface
interface RemoteFile {
  filename: String!
  filesize: Int

  # Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info.
  gatsbyImage(
    #
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    #
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    #
    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    #
    breakpoints: [Int] = [750, 1080, 1366, 1920]
    cropFocus: [RemoteFileCropFocus]
    fit: RemoteFileFit = COVER

    #
    # The image formats to generate. Valid values are AUTO (meaning the same format as the source image), JPG, PNG, WEBP and AVIF.
    # The default value is [AUTO, WEBP, AVIF], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    # not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    # both PNG and JPG is not supported and will be ignored.
    #
    formats: [RemoteFileFormat!] = [AUTO, WEBP, AVIF]

    #
    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    #
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    #
    layout: RemoteFileLayout = CONSTRAINED

    #
    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    #
    outputPixelDensities: [Float] = [0.25, 0.5, 1, 2]

    #
    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # TRACED_SVG: a low-resolution traced SVG of the image.
    # NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    placeholder: RemoteFilePlaceholder = DOMINANT_COLOR
    quality: Int = 75

    #
    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    #
    sizes: String

    #
    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    #
    width: Int
  ): GatsbyImageData
  height: Int
  id: ID!
  mimeType: String!
  publicUrl: String!
  resize(
    aspectRatio: Float
    cropFocus: [RemoteFileCropFocus]
    fit: RemoteFileFit = COVER

    #
    # The image formats to generate. Valid values are AUTO (meaning the same format as the source image), JPG, PNG, WEBP and AVIF.
    # The default value is [AUTO, WEBP, AVIF], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    # not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    # both PNG and JPG is not supported and will be ignored.
    format: RemoteFileFormat = AUTO
    height: Int
    quality: Int = 75
    width: Int
  ): RemoteFileResize
  width: Int
}

enum RemoteFileCropFocus {
  BOTTOM
  CENTER
  EDGES
  ENTROPY
  FACES
  LEFT
  RIGHT
  TOP
}

enum RemoteFileFit {
  CONTAIN
  COVER
  FILL
  OUTSIDE
}

enum RemoteFileFormat {
  AUTO
  AVIF
  JPG
  PNG
  WEBP
}

enum RemoteFileLayout {
  CONSTRAINED
  FIXED
  FULL_WIDTH
}

enum RemoteFilePlaceholder {
  BLURRED
  DOMINANT_COLOR
  NONE
  TRACED_SVG
}

type RemoteFileResize {
  height: Int
  src: String
  width: Int
}

input RemoteFileResizeFilterInput {
  height: IntQueryOperatorInput
  src: StringQueryOperatorInput
  width: IntQueryOperatorInput
}

type Site implements Node {
  buildTime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  children: [Node!]!
  graphqlTypegen: Boolean
  host: String
  id: ID!
  internal: Internal!
  jsxRuntime: String
  parent: Node
  pathPrefix: String
  polyfill: Boolean
  port: Int
  siteMetadata: SiteSiteMetadata
  trailingSlash: String
}

type SiteBuildMetadata implements Node {
  buildTime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  children: [Node!]!
  id: ID!
  internal: Internal!
  parent: Node
}

type SiteBuildMetadataConnection {
  distinct(field: SiteBuildMetadataFieldsEnum!): [String!]!
  edges: [SiteBuildMetadataEdge!]!
  group(field: SiteBuildMetadataFieldsEnum!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
  max(field: SiteBuildMetadataFieldsEnum!): Float
  min(field: SiteBuildMetadataFieldsEnum!): Float
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  sum(field: SiteBuildMetadataFieldsEnum!): Float
  totalCount: Int!
}

type SiteBuildMetadataEdge {
  next: SiteBuildMetadata
  node: SiteBuildMetadata!
  previous: SiteBuildMetadata
}

enum SiteBuildMetadataFieldsEnum {
  buildTime
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
}

input SiteBuildMetadataFilterInput {
  buildTime: DateQueryOperatorInput
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
}

type SiteBuildMetadataGroupConnection {
  distinct(field: SiteBuildMetadataFieldsEnum!): [String!]!
  edges: [SiteBuildMetadataEdge!]!
  field: String!
  fieldValue: String
  group(field: SiteBuildMetadataFieldsEnum!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
  max(field: SiteBuildMetadataFieldsEnum!): Float
  min(field: SiteBuildMetadataFieldsEnum!): Float
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  sum(field: SiteBuildMetadataFieldsEnum!): Float
  totalCount: Int!
}

input SiteBuildMetadataSortInput {
  fields: [SiteBuildMetadataFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteConnection {
  distinct(field: SiteFieldsEnum!): [String!]!
  edges: [SiteEdge!]!
  group(field: SiteFieldsEnum!, limit: Int, skip: Int): [SiteGroupConnection!]!
  max(field: SiteFieldsEnum!): Float
  min(field: SiteFieldsEnum!): Float
  nodes: [Site!]!
  pageInfo: PageInfo!
  sum(field: SiteFieldsEnum!): Float
  totalCount: Int!
}

type SiteEdge {
  next: Site
  node: Site!
  previous: Site
}

enum SiteFieldsEnum {
  buildTime
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  graphqlTypegen
  host
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  jsxRuntime
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  pathPrefix
  polyfill
  port
  siteMetadata___description
  siteMetadata___siteUrl
  siteMetadata___title
  trailingSlash
}

input SiteFilterInput {
  buildTime: DateQueryOperatorInput
  children: NodeFilterListInput
  graphqlTypegen: BooleanQueryOperatorInput
  host: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  jsxRuntime: StringQueryOperatorInput
  parent: NodeFilterInput
  pathPrefix: StringQueryOperatorInput
  polyfill: BooleanQueryOperatorInput
  port: IntQueryOperatorInput
  siteMetadata: SiteSiteMetadataFilterInput
  trailingSlash: StringQueryOperatorInput
}

type SiteFunction implements Node {
  absoluteCompiledFilePath: String!
  children: [Node!]!
  functionRoute: String!
  id: ID!
  internal: Internal!
  matchPath: String
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  parent: Node
  pluginName: String!
  relativeCompiledFilePath: String!
}

type SiteFunctionConnection {
  distinct(field: SiteFunctionFieldsEnum!): [String!]!
  edges: [SiteFunctionEdge!]!
  group(field: SiteFunctionFieldsEnum!, limit: Int, skip: Int): [SiteFunctionGroupConnection!]!
  max(field: SiteFunctionFieldsEnum!): Float
  min(field: SiteFunctionFieldsEnum!): Float
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  sum(field: SiteFunctionFieldsEnum!): Float
  totalCount: Int!
}

type SiteFunctionEdge {
  next: SiteFunction
  node: SiteFunction!
  previous: SiteFunction
}

enum SiteFunctionFieldsEnum {
  absoluteCompiledFilePath
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  functionRoute
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  matchPath
  originalAbsoluteFilePath
  originalRelativeFilePath
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  pluginName
  relativeCompiledFilePath
}

input SiteFunctionFilterInput {
  absoluteCompiledFilePath: StringQueryOperatorInput
  children: NodeFilterListInput
  functionRoute: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  matchPath: StringQueryOperatorInput
  originalAbsoluteFilePath: StringQueryOperatorInput
  originalRelativeFilePath: StringQueryOperatorInput
  parent: NodeFilterInput
  pluginName: StringQueryOperatorInput
  relativeCompiledFilePath: StringQueryOperatorInput
}

type SiteFunctionGroupConnection {
  distinct(field: SiteFunctionFieldsEnum!): [String!]!
  edges: [SiteFunctionEdge!]!
  field: String!
  fieldValue: String
  group(field: SiteFunctionFieldsEnum!, limit: Int, skip: Int): [SiteFunctionGroupConnection!]!
  max(field: SiteFunctionFieldsEnum!): Float
  min(field: SiteFunctionFieldsEnum!): Float
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  sum(field: SiteFunctionFieldsEnum!): Float
  totalCount: Int!
}

input SiteFunctionSortInput {
  fields: [SiteFunctionFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteGroupConnection {
  distinct(field: SiteFieldsEnum!): [String!]!
  edges: [SiteEdge!]!
  field: String!
  fieldValue: String
  group(field: SiteFieldsEnum!, limit: Int, skip: Int): [SiteGroupConnection!]!
  max(field: SiteFieldsEnum!): Float
  min(field: SiteFieldsEnum!): Float
  nodes: [Site!]!
  pageInfo: PageInfo!
  sum(field: SiteFieldsEnum!): Float
  totalCount: Int!
}

type SitePage implements Node {
  children: [Node!]!
  component: String!
  componentChunkName: String!
  id: ID!
  internal: Internal!
  internalComponentName: String!
  matchPath: String
  pageContext: JSON
  parent: Node
  path: String!
  pluginCreator: SitePlugin
}

type SitePageConnection {
  distinct(field: SitePageFieldsEnum!): [String!]!
  edges: [SitePageEdge!]!
  group(field: SitePageFieldsEnum!, limit: Int, skip: Int): [SitePageGroupConnection!]!
  max(field: SitePageFieldsEnum!): Float
  min(field: SitePageFieldsEnum!): Float
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  sum(field: SitePageFieldsEnum!): Float
  totalCount: Int!
}

type SitePageEdge {
  next: SitePage
  node: SitePage!
  previous: SitePage
}

enum SitePageFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  component
  componentChunkName
  id
  internalComponentName
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  matchPath
  pageContext
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  path
  pluginCreator___browserAPIs
  pluginCreator___children
  pluginCreator___children___children
  pluginCreator___children___children___children
  pluginCreator___children___children___id
  pluginCreator___children___id
  pluginCreator___children___internal___content
  pluginCreator___children___internal___contentDigest
  pluginCreator___children___internal___description
  pluginCreator___children___internal___fieldOwners
  pluginCreator___children___internal___ignoreType
  pluginCreator___children___internal___mediaType
  pluginCreator___children___internal___owner
  pluginCreator___children___internal___type
  pluginCreator___children___parent___children
  pluginCreator___children___parent___id
  pluginCreator___id
  pluginCreator___internal___content
  pluginCreator___internal___contentDigest
  pluginCreator___internal___description
  pluginCreator___internal___fieldOwners
  pluginCreator___internal___ignoreType
  pluginCreator___internal___mediaType
  pluginCreator___internal___owner
  pluginCreator___internal___type
  pluginCreator___name
  pluginCreator___nodeAPIs
  pluginCreator___packageJson
  pluginCreator___parent___children
  pluginCreator___parent___children___children
  pluginCreator___parent___children___id
  pluginCreator___parent___id
  pluginCreator___parent___internal___content
  pluginCreator___parent___internal___contentDigest
  pluginCreator___parent___internal___description
  pluginCreator___parent___internal___fieldOwners
  pluginCreator___parent___internal___ignoreType
  pluginCreator___parent___internal___mediaType
  pluginCreator___parent___internal___owner
  pluginCreator___parent___internal___type
  pluginCreator___parent___parent___children
  pluginCreator___parent___parent___id
  pluginCreator___pluginFilepath
  pluginCreator___pluginOptions
  pluginCreator___resolve
  pluginCreator___ssrAPIs
  pluginCreator___version
}

input SitePageFilterInput {
  children: NodeFilterListInput
  component: StringQueryOperatorInput
  componentChunkName: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  internalComponentName: StringQueryOperatorInput
  matchPath: StringQueryOperatorInput
  pageContext: JSONQueryOperatorInput
  parent: NodeFilterInput
  path: StringQueryOperatorInput
  pluginCreator: SitePluginFilterInput
}

type SitePageGroupConnection {
  distinct(field: SitePageFieldsEnum!): [String!]!
  edges: [SitePageEdge!]!
  field: String!
  fieldValue: String
  group(field: SitePageFieldsEnum!, limit: Int, skip: Int): [SitePageGroupConnection!]!
  max(field: SitePageFieldsEnum!): Float
  min(field: SitePageFieldsEnum!): Float
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  sum(field: SitePageFieldsEnum!): Float
  totalCount: Int!
}

input SitePageSortInput {
  fields: [SitePageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SitePlugin implements Node {
  browserAPIs: [String]
  children: [Node!]!
  id: ID!
  internal: Internal!
  name: String
  nodeAPIs: [String]
  packageJson: JSON
  parent: Node
  pluginFilepath: String
  pluginOptions: JSON
  resolve: String
  ssrAPIs: [String]
  version: String
}

type SitePluginConnection {
  distinct(field: SitePluginFieldsEnum!): [String!]!
  edges: [SitePluginEdge!]!
  group(field: SitePluginFieldsEnum!, limit: Int, skip: Int): [SitePluginGroupConnection!]!
  max(field: SitePluginFieldsEnum!): Float
  min(field: SitePluginFieldsEnum!): Float
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  sum(field: SitePluginFieldsEnum!): Float
  totalCount: Int!
}

type SitePluginEdge {
  next: SitePlugin
  node: SitePlugin!
  previous: SitePlugin
}

enum SitePluginFieldsEnum {
  browserAPIs
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  name
  nodeAPIs
  packageJson
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  pluginFilepath
  pluginOptions
  resolve
  ssrAPIs
  version
}

input SitePluginFilterInput {
  browserAPIs: StringQueryOperatorInput
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  name: StringQueryOperatorInput
  nodeAPIs: StringQueryOperatorInput
  packageJson: JSONQueryOperatorInput
  parent: NodeFilterInput
  pluginFilepath: StringQueryOperatorInput
  pluginOptions: JSONQueryOperatorInput
  resolve: StringQueryOperatorInput
  ssrAPIs: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

type SitePluginGroupConnection {
  distinct(field: SitePluginFieldsEnum!): [String!]!
  edges: [SitePluginEdge!]!
  field: String!
  fieldValue: String
  group(field: SitePluginFieldsEnum!, limit: Int, skip: Int): [SitePluginGroupConnection!]!
  max(field: SitePluginFieldsEnum!): Float
  min(field: SitePluginFieldsEnum!): Float
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  sum(field: SitePluginFieldsEnum!): Float
  totalCount: Int!
}

input SitePluginSortInput {
  fields: [SitePluginFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteSiteMetadata {
  description: String
  siteUrl: String
  title: String
}

input SiteSiteMetadataFilterInput {
  description: StringQueryOperatorInput
  siteUrl: StringQueryOperatorInput
  title: StringQueryOperatorInput
}

input SiteSortInput {
  fields: [SiteFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum SortOrderEnum {
  ASC
  DESC
}

input StringQueryOperatorInput {
  eq: String
  glob: String
  in: [String]
  ne: String
  nin: [String]
  regex: String
}

input TransformOptions {
  cropFocus: ImageCropFocus = ATTENTION
  duotone: DuotoneGradient
  fit: ImageFit = COVER
  grayscale: Boolean = false
  rotate: Int = 0
  trim: Float = 0
}

input WebPOptions {
  quality: Int
}
